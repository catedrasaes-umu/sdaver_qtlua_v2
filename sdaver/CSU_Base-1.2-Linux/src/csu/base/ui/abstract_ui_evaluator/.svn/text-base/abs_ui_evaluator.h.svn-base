// -*- mode: c++; c-basic-offset: 4; c-basic-style: bsd; -*-
/*
*   This program is free software; you can redistribute it and/or
*   modify
*   it under the terms of the GNU Lesser General Public License as
*   published by the Free Software Foundation; either version 3.0 of
*   the License, or (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU Lesser General Public License for more details.
*
*   You should have received a copy of the GNU Lesser General Public
*   License along with this library; if not, write to the Free Software
*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*   02111-1307 USA
*
*   This file is part of the OHTu-Open Usability Evaluation Framework,
*   http://sourceforge.net/projects/ohtu/
*
*/

#ifndef ABS_UI_EVALUATOR_H
#define ABS_UI_EVALUATOR_H

#include <csu/base/ui/abstract_ui_datamodel/abs_ui_datamodel.h>
#include <csu/base/ui/abstract_ui_report/abs_ui_report.h>
#include <csu/base/ui/abstract_ui_report/abs_ui_statement.h>

namespace csu {
namespace base {
namespace ui {
namespace abstract_ui_evaluator {

    using namespace csu::base::ui::abstract_ui_datamodel::AUI;
    using namespace csu::base::ui::abstract_ui_report;


    class AbstractUIEvaluator;
    typedef std::list<AbstractUIEvaluator *> EvaluatorList;


    class AbstractUIEvaluator
    {

    public:

        //Constructor
        AbstractUIEvaluator(const std::string & title,const std::string & desc,const std::string & type);
        virtual ~AbstractUIEvaluator();

        /// //////////////////////////////////
        /// Evaluation methods that will be called by the different implemented evaluation strategies
        /// //////////////////////////////////

        // Virtual method used to evaluate an aspect of the User Interfaces in a global way
        virtual void evaluate(AbstractUI *)
        {
            //may be empty in subclasses
            //FIXME try to change this
        }

        // Virtual method used to evaluate an Abstract Widget in a single way
        virtual void evaluate(AbstractWidget *)
        {
            //may be empty in subclasses
            //FIXME try to change this
        }

        // Virtual method used to evaluate an Abstract Widget refering to the global User Interface
        virtual void evaluate(AbstractWidget *,AbstractUI *)
        {
            //may be empty in subclasses
            //FIXME try to change this
        }

        //Reset temporal variables
        void init();

        AbstractUIReport * report();
        const std::string& title();
        const std::string& description();
        const std::string& type();

    protected:

        //Supporting Methods
        void _addError(const std::string& statement,const std::string& widgetName);
        void _addWarning(const std::string& statement,const std::string& widgetName);
        void _addInfo(const std::string& statement,const std::string& widgetName);

    private:
        //Title name of the evaluator (used in the report)
        std::string title_;
        //Short description about the behaviour of the evaluator
        std::string description_;
        //Short string with the type of evaluator
        std::string type_;
        //Report generated by the evaluator
        csu::base::ui::abstract_ui_report::AbstractUIReport * report_;
    };

} //abstract_ui_evaluator
} //ui
} //base
} //csu


#endif //ABS_UI_EVALUATOR_H
